name: Code & image Checks
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: tasky:latest

jobs:
  build-and-scan-container:
    name: Build, scan and sandbox image
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # For SARIF

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Build the image
        run: docker build -t $IMAGE_NAME .

      - name: Container Image Scan
        id: scan
        uses: PaloAltoNetworks/prisma-cloud-scan@v1
        with:
          pcc_console_url: ${{ vars.PCC_CONSOLE_URL }}
          pcc_user: ${{ secrets.PC_ACCESS_KEY }}
          pcc_pass: ${{ secrets.PC_SECRET_KEY }}
          image_name: ${{ env.IMAGE_NAME }}


      - name: Download Twistcli
        if: ${{ always() }}
        run: |
          chmod +x twistcli_download.sh
          ./twistcli_download.sh
        env:
          PCC_URL: ${{ vars.PCC_CONSOLE_URL }}
          PC_ACCESS_KEY: ${{ secrets.PC_ACCESS_KEY }}
          PC_SECRET_KEY: ${{ secrets.PC_SECRET_KEY }}

#      - name: Run Image Sandbox
#        if: ${{ always() }}
#        run: sudo -E ./twistcli sandbox --address "${PCC_CONSOLE_URL}" ${{ env.IMAGE_NAME }}
#        env:
#          PCC_CONSOLE_URL: ${{ vars.PCC_CONSOLE_URL }}
#          TWISTLOCK_USER: ${{ secrets.PC_ACCESS_KEY }}
#          TWISTLOCK_PASSWORD: ${{ secrets.PC_SECRET_KEY }}


  checkov-scan:
    name: Scan Repo with checkov
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # For SARIF

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3


      # CLI usage of checkov
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9.21

      - name: Download checkov
        run: |
         pip3 install -U checkov

      - name: Execute checkov
        run: |
          checkov --branch "${BRANCH_NAME}" --repo-id "${REPOSITORY}" --output cli --use-enforcement-rules -d .
        env:
          BC_API_KEY: ${{ secrets.PC_ACCESS_KEY }}::${{ secrets.PC_SECRET_KEY }}
          PRISMA_API_URL: ${{ vars.PRISMA_API_URL }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          REPOSITORY: ${{ github.repository }}
    
